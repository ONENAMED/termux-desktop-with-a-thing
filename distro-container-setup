#!/data/data/com.termux/files/usr/bin/bash

function setup_distro() {
    if [[ "$distro_answer" == "1" ]]; then
        selected_distro="debian"
    elif [[ "$distro_answer" == "2" ]]; then
        selected_distro="ubuntu"
    elif [[ "$distro_answer" == "3" ]]; then
        selected_distro="archlinux"
    elif [[ "$distro_answer" == "4" ]]; then
        selected_distro="alpine"
    elif [[ "$distro_answer" == "5" ]]; then
        selected_distro="fedora"
    elif [[ "$distro_answer" == "6" ]]; then
        selected_distro="ubuntu-ci-jammy"  # Adiciona o ubuntu-ci-jammy como a opÃ§Ã£o 6
    else
        selected_distro="debian"
    fi
    
    echo "selected_distro=\"$selected_distro\"" >> $config_file
    banner
    echo "${R}[${W}-${R}]${G}${BOLD}Installing ${C}proot-distro"${W}
    echo
    update_sys
    package_install_and_check "proot-distro"
    banner
    echo "${R}[${W}-${R}]${G}${BOLD}Setup Selected Distro: ${C}${selected_distro}"${W}
    echo
    pd install $selected_distro

    distro_path="$PREFIX/var/lib/proot-distro/installed-rootfs/$selected_distro"
}
#########################################################################
#
# Fix Sound Issue
#
#########################################################################

function distro_fix_sound_issue() {
    banner
    echo "${R}[${W}-${R}]${G}${BOLD}Fixing Proot Distro Sound Problem..."${W}
    echo
    echo "export PULSE_SERVER=127.0.0.1" >> "$distro_path/etc/profile"
cat <<EOF > "$HOME/.pd-sound-service"
pulseaudio --start --exit-idle-time=-1
pacmd load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1
EOF
}

#########################################################################
#
# Update Distro | Install Required Packages | Add User
#
#########################################################################

function pd_package_install_and_check() {
	packs_list=($@)
#get distro id
    if [ -f /etc/os-release ]; then
    . /etc/os-release
    fi
#instll package
for package_name in "${packs_list[@]}"; do
    echo "${R}[${W}-${R}]${G}${BOLD} Installing package: ${C}$package_name ${W}"
    if [[ "$ID" == "debian" ]] || [[ "$ID" == "ubuntu-ci-jammy" ]]; then
    sudo apt install "$package_name" -y
    elif [[ "$ID" == arch* ]]; then
    sudo pacman -Sy --noconfirm "$package_name"
    elif [[ "$ID" == "alpine" ]]; then
    sudo apk add "$package_name"
    elif [[ "$ID" == "fedora" ]]; then
    sudo dnf install "$package_name" -y
    fi
#handel error in installation
    if [ $? -ne 0 ]; then
        echo "${R}[${W}-${R}]${G}${BOLD} Error detected during installation of: ${C}$package_name ${W}"
        if [[ "$ID" == "debian" ]] || [[ "$ID" == "ubuntu-ci-jammy" ]]; then
        sudo apt --fix-broken install -y
        sudo dpkg --configure -a
        sudo apt install "$package_name" -y
        elif [[ "$ID" == arch* ]]; then
        sudo pacman -Syu --noconfirm
        sudo pacman -Sy --noconfirm "$package_name"
        elif [[ "$ID" == "alpine" ]]; then
        sudo apk fix
        sudo apk add "$package_name"
        elif [[ "$ID" == "fedora" ]]; then
        sudo dnf --refresh install -y
        sudo rpm --rebuilddb
        sudo dnf install "$package_name" -y
        fi
    fi
#reinstall
if [[ "$ID" == "debian" ]] || [[ "$ID" == "ubuntu-ci-jammy" ]]; then
    if ! dpkg -s "$package_name" >/dev/null 2>&1; then
    sudo apt install "$package_name" -y
    fi
elif [[ "$ID" == arch* ]]; then
    if ! pacman -Qi "$package_name" >/dev/null 2>&1; then
    sudo pacman -Sy --noconfirm "$package_name"
    fi
elif [[ "$ID" == "alpine" ]]; then
    if ! apk info -e "$package_name"; then
    sudo apk add "$package_name"
    fi
elif [[ "$ID" == "fedora" ]]; then
    if ! rpm -q "$package_name" >/dev/null 2>&1; then
    sudo dnf install "$package_name" -y
    fi
fi
#check installation
if [[ "$ID" == "debian" ]] || [[ "$ID" == "ubuntu-ci-jammy" ]]; then
    if dpkg -s "$package_name" >/dev/null 2>&1; then
    echo "${R}[${W}-${R}]${G} $package_name installed successfully ${W}"
    else
        if type -p "$package_name" &>/dev/null || [ -e "$PREFIX/bin/$package_name"* ] || [ -e "$PREFIX/bin/"*"$package_name" ]; then
        echo "${R}[${W}-${R}]${C} $package_name ${G}installed successfully ${W}"
        fi
    fi
elif [[ "$ID" == arch* ]]; then
    if pacman -Qi "$package_name" >/dev/null 2>&1; then
    echo "${R}[${W}-${R}]${G} $package_name installed successfully ${W}"
    else
        if type -p "$package_name" &>/dev/null || [ -e "$PREFIX/bin/$package_name"* ] || [ -e "$PREFIX/bin/"*"$package_name" ]; then
        echo "${R}[${W}-${R}]${C} $package_name ${G}installed successfully ${W}"
        fi
    fi
elif [[ "$ID" == "alpine" ]]; then
    if apk info -e "$package_name"; then
            echo "${R}[${W}-${R}]${G} $package_name installed successfully ${W}"
    else
        if type -p "$package_name" &>/dev/null || [ -e "$PREFIX/bin/$package_name"* ] || [ -e "$PREFIX/bin/"*"$package_name" ]; then
        echo "${R}[${W}-${R}]${C} $package_name ${G}installed successfully ${W}"
        fi
    fi
elif [[ "$ID" == "fedora" ]]; then
    if rpm -q "$package_name" >/dev/null 2>&1; then
    echo "${R}[${W}-${R}]${G} $package_name installed successfully ${W}"
    else
        if type -p "$package_name" &>/dev/null || [ -e "$PREFIX/bin/$package_name"* ] || [ -e "$PREFIX/bin/"*"$package_name" ]; then
        echo "${R}[${W}-${R}]${C} $package_name ${G}installed successfully ${W}"
        fi
    fi
fi
done
echo ""
}

function pd_root_package_install_and_check() {
	packs_list=($@)
#get distro id
    if [ -f /etc/os-release ]; then
    . /etc/os-release
    fi
#instll package
for package_name in "${packs_list[@]}"; do
    echo "${R}[${W}-${R}]${G}${BOLD} Installing package: ${C}$package_name ${W}"
    if [[ "$ID" == "debian" ]] || [[ "$ID" == "ubuntu-ci-jammy" ]]; then
        apt install "$package_name" -y
    elif [[ "$ID" == arch* ]]; then
        pacman -Sy --noconfirm "$package_name"
    elif [[ "$ID" == "alpine" ]]; then
        apk add "$package_name"
    elif [[ "$ID" == "fedora" ]]; then
        dnf install "$package_name" -y
    fi
#handel error in installation
    if [ $? -ne 0 ]; then
        echo "${R}[${W}-${R}]${G}${BOLD} Error detected during installation of: ${C}$package_name ${W}"
        if [[ "$ID" == "debian" ]] || [[ "$ID" == "ubuntu-ci-jammy" ]]; then
        apt --fix-broken install -y
        dpkg --configure -a
        apt install "$package_name" -y
        elif [[ "$ID" == arch* ]]; then
        pacman -Syu --noconfirm
        pacman -Sy --noconfirm "$package_name"
        elif [[ "$ID" == "alpine" ]]; then
            apk fix
            apk add "$package_name"
        elif [[ "$ID" == "fedora" ]]; then
        dnf --refresh install -y
        rpm --rebuilddb
        dnf install "$package_name" -y
        fi
    fi
#reinstall
if [[ "$ID" == "debian" ]] || [[ "$ID" == "ubuntu-ci-jammy" ]]; then
    if ! dpkg -s "$package_name" >/dev/null 2>&1; then
    apt install "$package_name" -y
    fi
elif [[ "$ID" == arch* ]]; then
    if ! pacman -Qi "$package_name" >/dev/null 2>&1; then
    pacman -Sy --noconfirm "$package_name"
    fi
elif [[ "$ID" == "alpine" ]]; then
    if ! apk info -e "$package_name"; then
    apk add "$package_name"
    fi
elif [[ "$ID" == "fedora" ]]; then
    if ! rpm -q "$package_name" >/dev/null 2>&1; then
    dnf install "$package_name" -y
    fi
fi
#check installation
if [[ "$ID" == "debian" ]] || [[ "$ID" == "ubuntu-ci-jammy" ]]; then
    if dpkg -s "$package_name" >/dev/null 2>&1; then
    echo "${R}[${W}-${R}]${G} $package_name installed successfully ${W}"
    else
        if type -p "$package_name" &>/dev/null || [ -e "$PREFIX/bin/$package_name"* ] || [ -e "$PREFIX/bin/"*"$package_name" ]; then
        echo "${R}[${W}-${R}]${C} $package_name ${G}installed successfully ${W}"
        fi
    fi
elif [[ "$ID" == arch* ]]; then
    if pacman -Qi "$package_name" >/dev/null 2>&1; then
    echo "${R}[${W}-${R}]${G} $package_name installed successfully ${W}"
    else
        if type -p "$package_name" &>/dev/null || [ -e "$PREFIX/bin/$package_name"* ] || [ -e "$PREFIX/bin/"*"$package_name" ]; then
        echo "${R}[${W}-${R}]${C} $package_name ${G}installed successfully ${W}"
        fi
    fi
elif [[ "$ID" == "alpine" ]]; then
    if apk info -e "$package_name"; then
            echo "${R}[${W}-${R}]${G} $package_name installed successfully ${W}"
        else
            if type -p "$package_name" &>/dev/null || [ -e "$PREFIX/bin/$package_name"* ] || [ -e "$PREFIX/bin/"*"$package_name" ]; then
                echo "${R}[${W}-${R}]${C} $package_name ${G}installed successfully ${W}"
            fi
    fi
elif [[ "$ID" == "fedora" ]]; then
    if rpm -q "$package_name" >/dev/null 2>&1; then
    echo "${R}[${W}-${R}]${G} $package_name installed successfully ${W}"
    else
        if type -p "$package_name" &>/dev/null || [ -e "$PREFIX/bin/$package_name"* ] || [ -e "$PREFIX/bin/"*"$package_name" ]; then
        echo "${R}[${W}-${R}]${C} $package_name ${G}installed successfully ${W}"
        fi
    fi
fi
done
echo ""
}

function distro_basic_task() {
    banner
    echo "${R}[${W}-${R}]${G}${BOLD}Updating ${C}$selected_distro ${G}And Installing Required Packages"${W}
    echo
    if [[ "$selected_distro" == "debian" ]] || [[ "$selected_distro" == "ubuntu-ci-jammy" ]]; then
    proot-distro login $selected_distro --shared-tmp -- env DISPLAY=:1.0 apt update
    proot-distro login $selected_distro --shared-tmp -- env DISPLAY=:1.0 apt upgrade -y
    elif [[ "$selected_distro" == "archlinux" ]]; then
    proot-distro login $selected_distro --shared-tmp -- env DISPLAY=:1.0 pacman -Syu --noconfirm
    elif [[ "$selected_distro" == "alpine" ]]; then
    proot-distro login $selected_distro --shared-tmp -- env DISPLAY=:1.0 apk update
    proot-distro login $selected_distro --shared-tmp -- env DISPLAY=:1.0 apk upgrade
    elif [[ "$selected_distro" == "fedora" ]]; then
    proot-distro login $selected_distro --shared-tmp -- env DISPLAY=:1.0 dnf update -y
    proot-distro login $selected_distro --shared-tmp -- env DISPLAY=:1.0 dnf upgrade -y
    chmod -R +w $distro_path/
    fi
    if [[ "$pd_audio_config_answer" == "y" ]]; then
    distro_packs="sudo pulseaudio"
    distro_fix_sound_issue
    elif [[ "$pd_audio_config_answer" == "n" ]]; then
    distro_packs="sudo"
    fi
    echo "pd_audio_config_answer=\"${pd_audio_config_answer}\"" >> $config_file
cat <<'EOF' > $distro_path/root/pd_basic_setup.sh
#!/bin/bash
R="$(printf '\033[1;31m')"                           
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
B="$(printf '\033[1;34m')"
C="$(printf '\033[1;36m')"                                       
W="$(printf '\033[0m')"
BOLD="$(printf '\033[1m')"

EOF
declare -f banner pd_root_package_install_and_check >> $distro_path/root/pd_basic_setup.sh
cat <<EOF >> $distro_path/root/pd_basic_setup.sh
banner
pd_root_package_install_and_check "${distro_packs}"
rm pd_basic_setup.sh
EOF
proot-distro login $selected_distro -- /bin/bash -c 'bash pd_basic_setup.sh'
    if [[ "$pd_useradd_answer" == "n" ]]; then
    final_user_name="root"
    elif [[ "$pd_useradd_answer" == "y" ]]; then
    final_user_name="${user_name}"
    fi
    echo "final_user_name=\"$final_user_name\"" >> $config_file
if [[ "$pd_pass_type" == "2" ]];then
if [[ "$selected_distro" == "alpine" ]]; then
cat <<EOF > $distro_path/root/useradd.sh
#!/bin/bash

groupadd storage
groupadd wheel
mkdir -p /home/$final_user_name
adduser -h /home/$final_user_name -s \$(which bash) -G users -D $final_user_name
chown ${final_user_name}:users /home/$final_user_name
echo "${final_user_name}:${pass}" | chpasswd
chmod u+rw /etc/sudoers
echo "$final_user_name ALL=(ALL:ALL) ALL" | tee -a /etc/sudoers
chmod u-w /etc/sudoers
rm useradd.sh
EOF
else
cat <<EOF > $distro_path/root/useradd.sh
#!/bin/bash

groupadd storage
groupadd wheel
useradd -m -g users -s \$(which bash) ${final_user_name}
usermod -aG wheel,polkitd,audio,video,storage ${final_user_name}
echo "${final_user_name}:${pass}" | chpasswd
chmod u+rw /etc/sudoers
echo "$final_user_name ALL=(ALL:ALL) ALL" | tee -a /etc/sudoers
chmod u-w /etc/sudoers
rm useradd.sh
EOF
fi
elif [[ "$pd_pass_type" == "1" ]];then
if [[ "$selected_distro" == "alpine" ]]; then
cat <<EOF > $distro_path/root/useradd.sh
#!/bin/bash

groupadd storage
groupadd wheel
mkdir -p /home/$final_user_name
adduser -h /home/$final_user_name -s \$(which bash) -G users -D $final_user_name
chown ${final_user_name}:users /home/$final_user_name
chmod u+rw /etc/sudoers
echo "$final_user_name ALL=(ALL) NOPASSWD:ALL" | tee -a /etc/sudoers
chmod u-w /etc/sudoers
rm useradd.sh
EOF
else
cat <<EOF > $distro_path/root/useradd.sh
#!/bin/bash

groupadd storage
groupadd wheel
useradd -m -g users -s \$(which bash) ${final_user_name}
usermod -aG wheel,polkitd,audio,video,storage ${final_user_name}
chmod u+rw /etc/sudoers
echo "$final_user_name ALL=(ALL) NOPASSWD:ALL" | tee -a /etc/sudoers
chmod u-w /etc/sudoers
rm useradd.sh
EOF
fi
fi
proot-distro login $selected_distro -- /bin/sh -c 'bash useradd.sh'
proot-distro login $selected_distro -- /bin/sh -c 'sudo -k'
}

#########################################################################
#
# Setup Zsh And Terminal Utility
#
#########################################################################

function distro_zsh_answer() {
    banner
    if [[ "$pd_useradd_answer" == "y" ]]; then
    save_path="$distro_path/home/$final_user_name"
    elif [[ "$pd_useradd_answer" == "n" ]]; then
    save_path="$distro_path/root"
    fi
    if [[ "$distro_zsh_answer" == "n" ]]; then
	echo "${R}[${W}-${R}]${C}Canceling Distro Zsh Setup..."${W}
    sleep 1.5
	pd_shell_name="bash"
    else
    pd_shell_name="zsh"
	echo "${R}[${W}-${R}]${G}${BOLD} Configuring Zsh for ${selected_distro}${G}.."${W}
	echo
    
cat <<'EOF' > $distro_path/root/pd_zsh_install.sh
#!/bin/bash
R="$(printf '\033[1;31m')"                           
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
B="$(printf '\033[1;34m')"
C="$(printf '\033[1;36m')"                                       
W="$(printf '\033[0m')"
BOLD="$(printf '\033[1m')"

EOF
declare -f banner get_latest_release pd_root_package_install_and_check >> $distro_path/root/pd_zsh_install.sh
cat <<'EOF' >> $distro_path/root/pd_zsh_install.sh
banner
pd_root_package_install_and_check "git zsh wget"
wget https://raw.githubusercontent.com/sabamdarif/short-linux-scripts/main/install-zsh.sh && bash install-zsh.sh
clear
rm pd_zsh_install.sh
EOF
proot-distro login $selected_distro -- /bin/bash -c 'bash pd_zsh_install.sh'
cat <<'EOF' > $save_path/pd_zsh_setup.sh
#!/bin/bash
R="$(printf '\033[1;31m')"                           
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
B="$(printf '\033[1;34m')"
C="$(printf '\033[1;36m')"                                       
W="$(printf '\033[0m')"
BOLD="$(printf '\033[1m')"

EOF
cat <<'EOF' >> $save_path/pd_zsh_setup.sh
wget https://raw.githubusercontent.com/sabamdarif/short-linux-scripts/main/install-zsh.sh && bash install-zsh.sh
clear
rm pd_zsh_setup.sh
EOF
    proot-distro login --user $final_user_name $selected_distro -- /bin/bash -c 'bash pd_zsh_setup.sh'
fi
echo "pd_shell_name=\"$pd_shell_name\"" >> $config_file
}

function distro_terminal_utility_setup() {
    if [[ "$distro_terminal_utility_setup_answer" == "n" ]];then
    banner
	echo "${R}[${W}-${R}]${C}Skipping Terminal Utility Setup For ${selected_distro}..."${W}
	echo
    if [[ "$pd_useradd_answer" == "y" ]]; then
    cp $distro_path/home/$final_user_name/.${pd_shell_name}rc $distro_path/home/$final_user_name/.${pd_shell_name}rc-2
    check_and_backup "$distro_path/home/$final_user_name/.${pd_shell_name}rc"
    mv $distro_path/home/$final_user_name/.${pd_shell_name}rc-2 $distro_path/home/$final_user_name/.${pd_shell_name}rc
cat <<'EOF' >> "$distro_path/home/$final_user_name/.${pd_shell_name}rc"
case $1 in
    tx11start|tx11stop|vncstart|vncstop)
        case $2 in
            --help|-h|--nogpu|-f) ;;
        esac
	echo "please run it from termux, not inside proot distro."
    ;;
esac

EOF
    fi
    cp $distro_path/root/.${pd_shell_name}rc $distro_path/root/.${pd_shell_name}rc-2
    check_and_backup "$distro_path/root/.${pd_shell_name}rc"
    mv $distro_path/root/.${pd_shell_name}rc-2 $distro_path/root/.${pd_shell_name}rc
cat <<'EOF' >> "$distro_path/root/.${pd_shell_name}rc"
case $1 in
    tx11start|tx11stop|vncstart|vncstop)
        case $2 in
            --help|-h|--nogpu|-f) ;;
        esac
	echo "please run it from termux, not inside proot distro."
    ;;
esac

EOF
	elif [[ "$distro_terminal_utility_setup_answer" == "y" ]];then
	banner
    echo "${R}[${W}-${R}]${C}${BOLD}Configuring Terminal Utility..."${W}
    echo
    if [[ "$selected_distro" == "debian" ]] || [[ "$selected_distro" == "ubuntu-ci-jammy" ]]; then
cat <<'EOF' > $distro_path/root/pd_setup.sh
#!/bin/bash

R="$(printf '\033[1;31m')"                           
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
B="$(printf '\033[1;34m')"
C="$(printf '\033[1;36m')"                                       
W="$(printf '\033[0m')"
BOLD="$(printf '\033[1m')"
EOF
declare -f banner get_latest_release pd_package_install_and_check >> $distro_path/root/pd_setup.sh
cat <<'EOF' >> $distro_path/root/pd_setup.sh
banner
pd_package_install_and_check "nala zoxide bat wget gpg"
device_arch=$(uname -m)
    case "$device_arch" in
        aarch64)
            archtype="aarch64"
            ;;
        arm)
            archtype="armhf"
            ;;
        amd64|x86_64)
            archtype="amd64"
            ;;
        i*86|x86)
            archtype="i386"
            ;;
        *)
            echo "${R} unknown architecture"${W}
            ;;
    esac
    version=$(get_latest_release "fastfetch-cli" "fastfetch")
    wget -O $distro_path/root/fastfetch.deb https://github.com/fastfetch-cli/fastfetch/releases/download/${version}/fastfetch-linux-${archtype}.deb
    apt install ./fastfetch.deb -y
    rm fastfetch.deb
mkdir -p /etc/apt/keyrings
wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | sudo gpg --dearmor -o /etc/apt/keyrings/gierens.gpg
echo "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | sudo tee /etc/apt/sources.list.d/gierens.list
chmod 644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list
apt update
apt install -y eza
rm pd_setup.sh
EOF
else
cat <<'EOF' > $distro_path/root/pd_setup.sh
#!/bin/bash

R="$(printf '\033[1;31m')"                           
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
B="$(printf '\033[1;34m')"
C="$(printf '\033[1;36m')"                                       
W="$(printf '\033[0m')"
BOLD="$(printf '\033[1m')"
EOF
declare -f banner pd_package_install_and_check >> $distro_path/root/pd_setup.sh
cat <<'EOF' >> $distro_path/root/pd_setup.sh
pd_package_install_and_check "eza zoxide bat fastfetch"
EOF
fi
proot-distro login $selected_distro -- /bin/bash -c 'bash pd_setup.sh'

shell_rc_content=$(cat <<'EOF'
alias cat='bat $@'
alias ls='eza --icons $@'
alias mkdir='mkdir -p'
alias neofetch='fastfetch'
case $1 in
    tx11start|tx11stop|vncstart|vncstop)
        case $2 in
            --help|-h|--nogpu|-f) ;;
        esac
    echo "please run it from termux, not inside proot distro."
    ;;
esac
#######################################################
# SPECIAL FUNCTIONS
#######################################################
# Extracts any archive(s) (if unp isn't installed)
extract() {
    for archive in "$@"; do
        if [ -f "$archive" ]; then
            case $archive in
            *.tar.bz2) tar xvjf $archive ;;
            *.tar.xz) tar -xvf $archive ;;
            *.tar.gz) tar -xzvf $archive ;;
            *.bz2) bunzip2 $archive ;;
            *.rar) rar x $archive ;;
            *.tar) tar xvf $archive ;;
            *.tbz2) tar xvjf $archive ;;
            *.tgz) tar xvzf $archive ;;
            *.zip) unzip $archive ;;
            *.Z) uncompress $archive ;;
            *.7z) 7z x $archive ;;
            *) echo "don't know how to extract '$archive'..." ;;
            esac
        else
            echo "'$archive' is not a valid file!"
        fi
    done
}
# Searches for text in all files in the current folder
ftext() {
    # -i case-insensitive
    # -I ignore binary files
    # -H causes filename to be printed
    # -r recursive search
    # -n causes line number to be printed
    # optional: -F treat search term as a literal, not a regular expression
    # optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
    grep -iIHrn --color=always "$1" . | less -r
}
# Copy and go to the directory
cpg() {
    if [ -d "$2" ]; then
        cp "$1" "$2" && cd "$2"
    else
        cp "$1" "$2"
    fi
}
# Move and go to the directory
mvg() {
    if [ -d "$2" ]; then
        mv "$1" "$2" && cd "$2"
    else
        mv "$1" "$2"
    fi
}
# Create and go to the directory
mkdirg() {
    mkdir -p "$1"
    cd "$1"
}
EOF
)
fi

if [[ "$distro_terminal_utility_setup_answer" == "y" ]];then
    if [[ "$pd_useradd_answer" == "y" ]]; then
    cp $distro_path/home/$final_user_name/.${pd_shell_name}rc $distro_path/home/$final_user_name/.${pd_shell_name}rc-2
    check_and_backup "$distro_path/home/$final_user_name/.${pd_shell_name}rc"
    mv $distro_path/home/$final_user_name/.${pd_shell_name}rc-2 $distro_path/home/$final_user_name/.${pd_shell_name}rc
    echo "$shell_rc_content" >> "$distro_path/home/$final_user_name/.${pd_shell_name}rc"
    fi
    echo "$shell_rc_content" >> "$distro_path/root/.${pd_shell_name}rc"
if [[ "$pd_useradd_answer" == "y" ]]; then
cat <<EOF >> "$distro_path/home/$final_user_name/.${pd_shell_name}rc"
#set zoxide as cd
eval "\$(zoxide init --cmd cd ${pd_shell_name})"
EOF
fi
cat <<EOF >> "$distro_path/root/.${pd_shell_name}rc"
#set zoxide as cd
eval "\$(zoxide init --cmd cd ${pd_shell_name})"
EOF
    if [[ "$selected_distro" == "debian" ]] || [[ "$selected_distro" == "ubuntu-ci-jammy" ]]; then
    if [[ "$pd_useradd_answer" == "y" ]]; then
cat <<'EOF' >> "$distro_path/home/$final_user_name/.${pd_shell_name}rc"
alias apt='sudo nala $@'
alias apt-get='sudo nala $@'
EOF
    fi
cat <<'EOF' >> "$distro_path/root/.${pd_shell_name}rc"
alias apt='sudo nala $@'
alias apt-get='sudo nala $@'
EOF
fi
fi
}

#########################################################################
#
# Create App Installer Shortcut
#
#########################################################################

function handel_debian_based_app_installer() {
if [[ "$distro_terminal_utility_setup_answer" == "y" ]];then
local package_manager="nala"
else
local package_manager="apt"
fi
cat <<TOP_EOF > "$PREFIX/bin/$selected_distro"
#!/data/data/com.termux/files/usr/bin/bash

if [[ "\$#" -eq 0 ]]; then
    proot-distro login --user $final_user_name $selected_distro --shared-tmp
elif [[ "\$1" = "install" ]]; then
if [[ ! -d "/data/data/com.termux/files/usr/share/applications/pd_added" ]]; then
        mkdir -p "/data/data/com.termux/files/usr/share/applications/pd_added"
        fi
proot-distro login --user $final_user_name $selected_distro --shared-tmp -- env DISPLAY=:1.0 sudo $package_manager install \${@:2}
cat <<EOF > "$save_root_path/packinstall.sh"
packages=(\${@:2})
EOF
cat <<'EOF' >> "$save_root_path/packinstall.sh"
for package_name in "\${packages[@]}"; do
desktop_files=\$(dpkg-query -W -f='\${binary:Package}\n' | grep "^\$package_name\(-.*\)\?\$" | xargs dpkg-query -L | grep "^/usr/share/applications/.*\.desktop\$")
if [ -z "\$desktop_files" ]; then
    echo "${R}[${W}-${R}]${G} No .desktop files found for package ${C}'\$package_name' ${G}in/usr/share/applications."
else
    for desktop_files_name in \$desktop_files; do
        desktop_files_with_ext=\$(basename "\$desktop_files_name")
        desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
        echo "${R}[${W}-${R}]${G} Adding ${C}\${desktop_files_without_ext} ${G}To Termux Menu"
        cp "/usr/share/applications/\${desktop_files_with_ext}" "/data/data/com.termux/files/usr/share/applications/pd_added/"
        sed -i 's/Exec=/Exec=pdrun /g' "/data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_with_ext}"
    done
fi
done
rm packinstall.sh
EOF
proot-distro login $selected_distro -- /bin/bash -c 'bash packinstall.sh'

elif [[ "\$1" = "remove" ]] || [[ "\$1" = "autoremove" ]]; then
proot-distro login --user $final_user_name $selected_distro --shared-tmp -- env DISPLAY=:1.0 sudo $package_manager \$1 \${@:2}
cat <<EOF > "$save_root_path/packremove.sh"
packages=(\${@:2})
EOF
cat <<'EOF' >> "$save_root_path/packremove.sh"
for package_name in "\${packages[@]}"; do
desktop_files=\$(dpkg-query -W -f='\${binary:Package}\n' | grep "^\$package_name\(-.*\)\?\$" | xargs dpkg-query -L | grep "^/usr/share/applications/.*\.desktop\$")
if [ -z "\$desktop_files" ]; then
    echo "${R}[${W}-${R}]${G} No .desktop files found for package ${C}'\$package_name' ${G}in/usr/share/applications."
else
    for desktop_files_name in \$desktop_files; do
        desktop_files_with_ext=\$(basename "\$desktop_files_name")
        desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
        echo "${R}[${W}-${R}]${G} Removing ${C}\${desktop_files_without_ext} ${G}From Termux Menu" 
        rm /data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_with_ext}
    done
fi
done
rm packremove.sh
EOF
proot-distro login $selected_distro -- /bin/bash -c 'bash packremove.sh'
elif [[ "\$1" = "update" ]]; then
proot-distro login --user $final_user_name $selected_distro --shared-tmp -- env DISPLAY=:1.0 sudo $package_manager update
fi

if [[ \$1 = "install" ]] || [[ \$1 = "remove" ]] || [[ \$1 = "autoremove" ]]; then
gtk-update-icon-cache
update-desktop-database -q "$PREFIX/share/applications/pd_added"
fi

TOP_EOF
}

function handel_arch_based_app_installer() {
cat <<TOP_EOF > "$PREFIX/bin/$selected_distro"
#!/data/data/com.termux/files/usr/bin/bash

if [[ "\$#" -eq 0 ]]; then
    proot-distro login --user $final_user_name $selected_distro --shared-tmp
elif [[ "\$1" = "install" ]]; then
if [[ ! -d "/data/data/com.termux/files/usr/share/applications/pd_added" ]]; then
        mkdir -p "/data/data/com.termux/files/usr/share/applications/pd_added"
        fi
proot-distro login --user $final_user_name $selected_distro --shared-tmp -- env DISPLAY=:1.0 sudo pacman -S --noconfirm "\${@:2}"
cat <<EOF > "$save_root_path/packinstall.sh"
packages=("\${@:2}")
EOF
cat <<'EOF' >> "$save_root_path/packinstall.sh"
for package_name in "\${packages[@]}"; do
desktop_files=\$(pacman -Ql \$package_name | grep -oP "/usr/share/applications/.*\.desktop$")
if [ -z "\$desktop_files" ]; then
    echo "${R}[${W}-${R}]${G} No .desktop files found for package ${C}'\$package_name' ${G}in /usr/share/applications."
else
    for desktop_files_name in \$desktop_files; do
        desktop_files_with_ext=\$(basename "\$desktop_files_name")
        desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
        echo "${R}[${W}-${R}]${G} Adding ${C}\${desktop_files_without_ext} ${G}To Termux Menu"
        cp "/usr/share/applications/\${desktop_files_with_ext}" "/data/data/com.termux/files/usr/share/applications/pd_added/"
        sed -i 's/Exec=/Exec=pdrun /g' "/data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_with_ext}"
    done
fi
done
rm packinstall.sh
EOF
proot-distro login $selected_distro -- /bin/bash -c 'bash packinstall.sh'

elif [[ "\$1" = "remove" ]]; then
proot-distro login --user $final_user_name $selected_distro --shared-tmp -- env DISPLAY=:1.0 sudo pacman -R --noconfirm "\${@:2}"
cat <<EOF > "$save_root_path/packremove.sh"
packages=("\${@:2}")
EOF
cat <<'EOF' >> "$save_root_path/packremove.sh"
for package_name in "\${packages[@]}"; do
desktop_files=\$(pacman -Ql \$package_name | grep -oP "/usr/share/applications/.*\.desktop$")
if [ -z "\$desktop_files" ]; then
    echo "${R}[${W}-${R}]${G} No .desktop files found for package ${C}'\$package_name' ${G}in /usr/share/applications."
else
    for desktop_files_name in \$desktop_files; do
        desktop_files_with_ext=\$(basename "\$desktop_files_name")
        desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
        echo "${R}[${W}-${R}]${G} Removing ${C}\${desktop_files_without_ext} ${G}From Termux Menu"
        rm /data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_with_ext}
    done
fi
done
rm packremove.sh
EOF
proot-distro login $selected_distro -- /bin/bash -c 'bash packremove.sh'
elif [[ "\$1" = "update" ]]; then
proot-distro login --user $final_user_name $selected_distro --shared-tmp -- env DISPLAY=:1.0 sudo pacman -Su
fi

if [[ \$1 = "install" ]] || [[ \$1 = "remove" ]]; then
gtk-update-icon-cache
update-desktop-database -q "$PREFIX/share/applications/pd_added"
fi

TOP_EOF
}

function handel_alpine_based_app_installer() {
cat <<TOP_EOF > "$PREFIX/bin/$selected_distro"
#!/data/data/com.termux/files/usr/bin/bash
    if [[ "\$#" -eq 0 ]]; then
    proot-distro login --user $final_user_name $selected_distro --shared-tmp
elif [[ "\$1" = "install" ]]; then
if [[ ! -d "/data/data/com.termux/files/usr/share/applications/pd_added" ]]; then
        mkdir -p "/data/data/com.termux/files/usr/share/applications/pd_added"
        fi
proot-distro login --user $final_user_name $selected_distro --shared-tmp -- env DISPLAY=:1.0 sudo apk add "\${@:2}"
cat <<EOF > "$save_root_path/packinstall.sh"
packages=("\${@:2}")
EOF
cat <<'EOF' >> "$save_root_path/packinstall.sh"
for package_name in "\${packages[@]}"; do
desktop_files=\$(ls /usr/share/applications/ | grep "\$package_name.*\.desktop$")
if [ -z "\$desktop_files" ]; then
    echo "${R}[${W}-${R}]${G} No .desktop files found for package ${C}'\$package_name' ${G}in /usr/share/applications."
else
    for desktop_files_name in \$desktop_files; do
        desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
        echo "${R}[${W}-${R}]${G} Adding ${C}\${desktop_files_without_ext} ${G}To Termux Menu"
        sudo cp "/usr/share/applications/\${desktop_files_name}" "/data/data/com.termux/files/usr/share/applications/pd_added/"
        sudo sed -i 's/Exec=/Exec=pdrun /g' "/data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_name}"
    done
fi
done
rm packinstall.sh
EOF
proot-distro login $selected_distro -- /bin/bash -c 'bash packinstall.sh'

elif [[ "\$1" = "remove" ]] || [[ "\$1" = "remove" ]]; then
proot-distro login --user $final_user_name $selected_distro --shared-tmp -- env DISPLAY=:1.0 sudo apk del "\${@:2}"
cat <<EOF > "$save_root_path/packremove.sh"
packages=("\${@:2}")
EOF
cat <<'EOF' >> "$save_root_path/packremove.sh"
for package_name in "\${packages[@]}"; do
desktop_files=\$(ls /usr/share/applications/ | grep "\$package_name.*\.desktop$")
if [ -z "\$desktop_files" ]; then
    echo "${R}[${W}-${R}]${G} No .desktop files found for package ${C}'\$package_name' ${G}in /usr/share/applications."
else
    for desktop_files_name in \$desktop_files; do
        desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
        echo "${R}[${W}-${R}]${G} Removing ${C}\${desktop_files_without_ext} ${G}From Termux Menu"
        sudo rm /data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_name}
    done
fi
done
rm packremove.sh
EOF
proot-distro login $selected_distro -- /bin/bash -c 'bash packremove.sh'
elif [[ "\$1" = "update" ]]; then
proot-distro login --user $final_user_name $selected_distro --shared-tmp -- env DISPLAY=:1.0 sudo apk update
fi

if [[ \$1 = "install" ]] || [[ \$1 = "remove" ]]; then
gtk-update-icon-cache
update-desktop-database -q "$PREFIX/share/applications/pd_added"
fi

TOP_EOF
}

function handel_fedora_based_app_installer() {
cat <<TOP_EOF > "$PREFIX/bin/$selected_distro"
#!/data/data/com.termux/files/usr/bin/bash

if [[ "\$#" -eq 0 ]]; then
    proot-distro login --user $final_user_name $selected_distro --shared-tmp
elif [[ "\$1" = "install" ]]; then
if [[ ! -d "/data/data/com.termux/files/usr/share/applications/pd_added" ]]; then
        mkdir -p "/data/data/com.termux/files/usr/share/applications/pd_added"
        fi
proot-distro login --user $final_user_name $selected_distro --shared-tmp -- env DISPLAY=:1.0 sudo dnf install \${@:2}
cat <<EOF > "$save_root_path/packinstall.sh"
packages=(\${@:2})
EOF
cat <<'EOF' >> "$save_root_path/packinstall.sh"
for package_name in "\${packages[@]}"; do
package_query=\$(rpm -q "\$package_name" | sed 's/-[0-9].*//')
desktop_files=\$(\$package_query | grep "^/usr/share/applications/.*\.desktop\$")
if [ -z "\$desktop_files" ]; then
    echo "${R}[${W}-${R}]${G} No .desktop files found for package ${C}'\$package_name' ${G}in /usr/share/applications."
else
    for desktop_files_name in \$desktop_files; do
        desktop_files_with_ext=\$(basename "\$desktop_files_name")
        desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
        echo "${R}[${W}-${R}]${G} Adding ${C}\${desktop_files_without_ext} ${G}To Termux Menu"
        cp "/usr/share/applications/\${desktop_files_with_ext}" "/data/data/com.termux/files/usr/share/applications/pd_added/"
        sed -i 's/Exec=/Exec=pdrun /g' "/data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_with_ext}"
    done
fi
done
rm packinstall.sh
EOF
proot-distro login $selected_distro -- /bin/bash -c 'bash packinstall.sh'

elif [[ "\$1" = "remove" ]]; then
proot-distro login --user $final_user_name $selected_distro --shared-tmp -- env DISPLAY=:1.0 sudo dnf remove \${@:2}
cat <<EOF > "$save_root_path/packremove.sh"
packages=(\${@:2})
EOF
cat <<'EOF' >> "$save_root_path/packremove.sh"
for package_name in "\${packages[@]}"; do
desktop_files=\$(rpm -q "\$package_name" | grep "^/usr/share/applications/.*\.desktop\$")
if [ -z "\$desktop_files" ]; then
    echo "${R}[${W}-${R}]${G} No .desktop files found for package ${C}'\$package_name' ${G}in /usr/share/applications."
else
    for desktop_files_name in \$desktop_files; do
        desktop_files_with_ext=\$(basename "\$desktop_files_name")
        desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
        echo "${R}[${W}-${R}]${G} Removing ${C}\${desktop_files_without_ext} ${G}From Termux Menu" 
        rm /data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_with_ext}
    done
fi
done
rm packremove.sh
EOF
proot-distro login $selected_distro -- /bin/bash -c 'bash packremove.sh'
else
echo "sudo dnf \$@
rm else.sh
" > $save_root_path/else.sh
proot-distro login $selected_distro -- /bin/sh -c 'bash else.sh'
fi

if [[ \$1 = "install" ]] || [[ \$1 = "remove" ]] || [[ \$1 = "autoremove" ]]; then
gtk-update-icon-cache
update-desktop-database -q "$PREFIX/share/applications/pd_added"
fi

TOP_EOF

}

function distro_create_app_installer() {
    banner
    echo "${R}[${W}-${R}]${G}${BOLD}Creating App Launcher"${W}

if [[ "$pd_useradd_answer" == "y" ]]; then
save_user_path="$distro_path/home/$final_user_name"
fi
save_root_path="$distro_path/root"

if [[ "$selected_distro" == "debian" ]] || [[ "$selected_distro" == "ubuntu-ci-jammy" ]]; then
handel_debian_based_app_installer
elif [[ "$selected_distro" == "archlinux" ]]; then
handel_arch_based_app_installer
elif [[ "$selected_distro" == "alpine" ]]; then
handel_alpine_based_app_installer
elif [[ "$selected_distro" == "fedora" ]]; then
handel_fedora_based_app_installer
fi

cat <<EOF >> "$PREFIX/bin/$selected_distro"
function remove_distro_container() {
     while true; do
        read -p "${R}[${W}-${R}]${Y}${BOLD} Do you want to remove the distro${R}(it can't be undone) ${Y}(y/n) ${W}" ans_remove_distro
        case \$ans_remove_distro in
            [yY]* )
                echo "${R}[${W}-${R}]${G}Continuing with answer: \$ans_remove_distro${W}"
                sleep 0.2
                if [[ -d $distro_path ]]; then
                proot-distro remove $selected_distro
                distro_file_list=(
                    "$PREFIX/bin/pdrun"
                    "$PREFIX/share/applications/pd_added"
                    "$PREFIX/bin/add2menu"
                    "$PREFIX/share/applications/add2menu.desktop"
                    "$PREFIX/bin/$selected_distro"
                )
                    for distro_file in "${distro_file_list[@]}"; do
                    if [[ -e "$distro_file" ]]; then
                        if [[ -d "$distro_file" ]]; then
                        rm -rf $distro_file
                        else
                        rm $distro_file
                        fi
                    else
                    echo "${R}File does not exist: $distro_file"${W}
                    fi
                    done
                echo "${G}$$selected_distro removed successfully"${W}
                echo "distro_add_answer=\"n\"" >> $config_file
                else
                echo "${R}$selected_distro does not exist"
                fi
                break;;
            [nN]* )
                echo "${R}[${W}-${R}]${C}Skipping distro remove"${W}
                sleep 0.2
                break;;
            * )
                echo "${R}[${W}-${R}]${R}Invalid input. Please enter 'y' or 'n'."${W}
                ;;
        esac
    done
}

function help_distro_container() {
echo -e "
$selected_distro install packagename     to install packages and add them to termux desktop\n
$selected_distro remove packagename      to remove packages and also remove them to termux desktop\n
$selected_distro update                  to update the distro\n
$selected_distro -r                      to login as root\n
$selected_distro --remove                to complitely remove the distro and delete all files and data related to it\n
"
}
case \$1 in
--root|-r)
proot-distro sh $selected_distro
;;
--remove)
remove_distro_container
;;
--help|-h)
help_distro_container
;;
esac
EOF

chmod +x "$PREFIX/bin/$selected_distro"

#########################################################################
########################### Add To Menu Setup ###########################
#########################################################################
banner
package_install_and_check "zenity"

check_and_create_directory "$PREFIX/share/applications/pd_added"

echo "#!/data/data/com.termux/files/usr/bin/bash
distro_path="$distro_path"
" > $PREFIX/bin/add2menu

cat <<'EOF' >> $PREFIX/bin/add2menu

list_desktop_files_with_name() {
    find "$1" -name "*.desktop" -type f -exec awk -F '=' '/^Name=/ {gsub(/.desktop$/,"",$2); print $2 ";;" FILENAME}' {} \;
}

action=$(zenity --list --title="Choose Action" --text="Select an action:" --checklist --column="" --column="Action" FALSE "Add Application To Termux Menu" FALSE "Remove Application From Termux Menu")             
if [[ -z $action ]]; then
  zenity --info --text="No action selected. Quitting..." --title="Operation Cancelled"
  exit 0
fi

if [[ $action == *"Add Application To Termux Menu"* ]]; then
  # Get the list of .desktop files with Name parameter
  files=$(list_desktop_files_with_name "$distro_path/usr/share/applications/")

  if [[ -z $files ]]; then
    zenity --info --text="No .desktop files found. Quitting..." --title="Operation Cancelled"
    exit 0
  fi

  # Display the list of files and ask user to select
  selected_names=$(zenity --list --title="Add To Termux Menu" --text="Select The App Name To Add:" --checklist --column="Include" --column="Name" --separator="," $files)

  if [[ -z $selected_names ]]; then
    zenity --info --text="No file selected. Quitting..." --title="Operation Cancelled"
    exit 0
  fi

  IFS=',' read -ra selected_names_array <<< "$selected_names"

  for selected_item in "${selected_names_array[@]}"; do
    selected_name=${selected_item%%;;*}
    selected_file=${selected_item##*;;}

    cp "$selected_file" "$PREFIX/share/applications/pd_added/"
    sed -i 's/Exec=/Exec=pdrun /g' "$PREFIX/share/applications/pd_added/${selected_file##*/}"
    update-desktop-database -q "$PREFIX/share/applications/pd_added"
    zenity --info --text="File '$selected_name' added successfully!" --title="Success"
  done
fi

if [[ $action == *"Remove Application From Termux Menu"* ]]; then
  # Get the list of .desktop files with Name parameter
  files=$(list_desktop_files_with_name "$PREFIX/share/applications/pd_added/")

  if [[ -z $files ]]; then
    zenity --info --text="No .desktop files found in pd_added. Quitting..." --title="Operation Cancelled"
    exit 0
  fi

  # Display the list of files and ask user to select
  selected_names=$(zenity --list --title="Remove From Termux Menu" --text="Choose .desktop files to remove:" --checklist --column="Include" --column="Name" --separator="," $files)

  if [[ -z $selected_names ]]; then
    zenity --info --text="No file selected for removal. Quitting..." --title="Operation Cancelled"
    exit 0
  fi

  IFS=',' read -ra selected_names_array <<< "$selected_names"

  for selected_item in "${selected_names_array[@]}"; do
    selected_name=${selected_item%%;;*}
    selected_file=${selected_item##*;;}

    rm "$selected_file"
    update-desktop-database -q "$PREFIX/share/applications/pd_added"
    zenity --info --text="File '$selected_name' has been removed successfully!" --title="Success"
  done
fi

gtk-update-icon-cache
EOF
chmod +x "$PREFIX/bin/add2menu"

check_and_create_directory "$PREFIX/share/applications/"
cat <<EOF > "$PREFIX/share/applications/add2menu.desktop"
[Desktop Entry]
Version=1.0
Type=Application
Name=Add To Menu
Comment=Add proot-distro's apps to termux menu
Exec=add2menu
Icon=edit-move
Categories=System;
Path=
Terminal=false
StartupNotify=false
EOF
chmod +x $PREFIX/share/applications/add2menu.desktop
cp $PREFIX/share/applications/add2menu.desktop $HOME/Desktop/
}

#########################################################################
#
# App Launcher Setup
#
#########################################################################

function distro_app_launch_setup() {
    if [[ "$pd_audio_config_answer" == "n" ]];then
cat <<EOF > "$PREFIX/bin/pdrun"
#!/data/data/com.termux/files/usr/bin/bash

selected_pd_hw_method="$pd_hw_method"
EOF
    else
cat <<EOF > "$PREFIX/bin/pdrun"
#!/data/data/com.termux/files/usr/bin/bash

selected_pd_hw_method="$pd_hw_method"
bash ~/.pd-sound-service
EOF
    fi
cat <<EOF >> "$PREFIX/bin/pdrun"
xhost + > /dev/null 2>&1
case \$1 in
--nogpu)
proot-distro login --user $final_user_name $selected_distro --shared-tmp -- env DISPLAY=:1.0 \${@:2}
;;
--help|-h)
echo "${G}Type ${C}pdrun launch command ${G}to start with gpu acceleration"${W}
echo "${G}Type ${C}pdrun ---nogpu launch command ${G}to start without gpu acceleration"${W}
;;
*)
proot-distro login --user $final_user_name $selected_distro --shared-tmp -- eval "env DISPLAY=:1.0 \$selected_pd_hw_method \$@"
;;
esac
EOF
chmod +x "$PREFIX/bin/pdrun"
}

#########################################################################
#
# Distro Folders , Theme And Icon Link
#
#########################################################################

function distro_folders_link() {
    echo "${R}[${W}-${R}]${G}${BOLD}Link Distro Directories With Internal Storage"${W}
cat <<EOF > "$save_path/setup-folders.sh"
#!/bin/bash
directories=(Desktop Music Downloads Pictures Videos)
for dir in "\${directories[@]}"; do
ln -s "/data/data/com.termux/files/home/\$dir" "\$HOME/"
done
rm setup-folders.sh
EOF
proot-distro login --user $final_user_name $selected_distro -- /bin/sh -c 'bash setup-folders.sh'
    echo "${R}[${W}-${R}]${G}${BOLD}Link Distro Termux Themes And Icons With $selected_distro "${W}
    sleep 0.5
    check_and_create_directory "$HOME/.icons"
    ln -s $icons_folder $save_path
    check_and_create_directory "$HOME/.themes"
    ln -s $themes_folder $save_path
    ln -s /data/data/com.termux/files/home/.fonts $save_path

}

#########################################################################
#
# Check Installation
#
#########################################################################
if [[ -d "$PREFIX/bin/$selected_distro" ]] && [[ -d "$PREFIX/var/lib/proot-distro/installed-rootfs/$selected_distro" ]]; then
echo
echo "${R}[${W}-${R}]${G}${BOLD}$selected_distro container setup successfully"${W}
else
echo "${R}[${W}-${R}]${R}Some problem occurrs in $selected_distro setup${W}"
fi

setup_distro
distro_basic_task
distro_zsh_answer
distro_terminal_utility_setup
distro_create_app_installer
distro_app_launch_setup
distro_folders_link
